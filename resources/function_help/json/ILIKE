{
  "name": "ILIKE",
  "type": "operator",
  "groups": ["Operators"],
  "description": "Returns TRUE if the first parameter matches case-insensitive the supplied pattern. LIKE can be used instead of ILIKE to make the match case-sensitive. Works with numbers also.",
  "arguments": [{
    "arg": "string/number",
    "description": "string to search"
  }, {
    "arg": "pattern",
    "description": "pattern to find, you can use '%' as a wildcard, '_' as a single char and '\\\\\\\\' to escape these special characters."
  }],
  "examples": [{
    "expression": "'A' ILIKE 'A'",
    "returns": "TRUE"
  }, {
    "expression": "'A' ILIKE 'a'",
    "returns": "TRUE"
  }, {
    "expression": "'A' ILIKE 'B'",
    "returns": "FALSE"
  }, {
    "expression": "'ABC' ILIKE 'b'",
    "returns": "FALSE"
  }, {
    "expression": "'ABC' ILIKE 'B'",
    "returns": "FALSE"
  }, {
    "expression": "'ABC' ILIKE '_b_'",
    "returns": "TRUE"
  }, {
    "expression": "'ABC' ILIKE '_B_'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' ILIKE '_b_'",
    "returns": "FALSE"
  }, {
    "expression": "'ABCD' ILIKE '_B_'",
    "returns": "FALSE"
  }, {
    "expression": "'ABCD' ILIKE '_b%'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' ILIKE '_B%'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' ILIKE '%b%'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' ILIKE '%B%'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD%' ILIKE 'abcd\\\\\\\\%'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' ILIKE '%B\\\\\\\\%'",
    "returns": "FALSE"
  }],
  "tags": ["compare", "numbers", "insensitive", "first", "match", "sensitive", "supplied", "parameter", "case", "matches", "pattern"]
}
