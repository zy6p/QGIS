{
  "name": "LIKE",
  "type": "operator",
  "groups": ["Operators"],
  "description": "Returns TRUE if the first parameter matches the supplied pattern. Works with numbers also.",
  "arguments": [{
    "arg": "string/number",
    "description": "value"
  }, {
    "arg": "pattern",
    "description": "pattern to compare value with, you can use '%' as a wildcard, '_' as a single char and '\\\\\\\\' to escape these special characters."
  }],
  "examples": [{
    "expression": "'A' LIKE 'A'",
    "returns": "TRUE"
  }, {
    "expression": "'A' LIKE 'a'",
    "returns": "FALSE"
  }, {
    "expression": "'A' LIKE 'B'",
    "returns": "FALSE"
  }, {
    "expression": "'ABC' LIKE 'B'",
    "returns": "FALSE"
  }, {
    "expression": "'ABC' LIKE '_B_'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' LIKE '_B_'",
    "returns": "FALSE"
  }, {
    "expression": "'ABCD' LIKE '_B%'",
    "returns": "TRUE"
  }, {
    "expression": "'ABCD' LIKE '%B%'",
    "returns": "TRUE"
  }, {
    "expression": "'1%' LIKE '1\\\\\\\\%'",
    "returns": "TRUE"
  }, {
    "expression": "'1_' LIKE '1\\\\\\\\%'",
    "returns": "FALSE"
  }],
  "tags": ["compare", "sensitive", "numbers", "first", "end", "start", "begin", "works", "supplied", "parameter", "matches", "pattern"]
}
